import codecs, json, six

cat = ''

def size(s):
    return len(s)/2

cat_size = size(cat)

# print('Cat size: {} kB ({} bits)'.format(cat_size/8000, cat_size))

# print(bytes.fromhex(cat))
# print(codecs.decode(cat, "hex").decode('utf-8'))


# with open('/tmp/cat_json.json') as j_file:
#     cat_json = json.load(j_file)

# values_dots = [val['_source']['layers']['btatt']['btatt.value'] for val in cat_json]
# values_str = ''.join([x for x in values_dots]).replace(':', '')

# print(values_str == cat)

# print(cat_json[0]['_source']['layers']['btatt']['btatt.value'])


GS  = b'\x1d'

def my_raw(self, msg):
    return self.out_ep, msg, self.timeout

def my_init(self, idVendor, idProduct, usb_args=None, timeout=0, in_ep=0x82, out_ep=0x01, *args, **kwargs):
    Escpos.__init__(self, *args, **kwargs)
    self.timeout = timeout
    self.in_ep = in_ep
    self.out_ep = out_ep

    usb_args = usb_args or {}
    if idVendor:
        usb_args['idVendor'] = idVendor
    if idProduct:
        usb_args['idProduct'] = idProduct

def my_image(self, img_source, high_density_vertical=True, high_density_horizontal=True, impl="bitImageRaster", fragment_height=9600, center=False):
    im = EscposImage(img_source)
    try:
        max_width = 10

        if center:
            im.center(max_width)
    except KeyError:
        # If the printer's pixel width is not known, print anyways...
        pass
    except ValueError:
        # If the max_width cannot be converted to an int, print anyways...
        pass

    if im.height > fragment_height:
        fragments = im.split(fragment_height)
        for fragment in fragments:
            self.image(fragment,
                       high_density_vertical=high_density_vertical,
                       high_density_horizontal=high_density_horizontal,
                       impl=impl,
                       fragment_height=fragment_height)
        return

    if impl == "bitImageRaster":
        # GS v 0, raster format bit image
        density_byte = (0 if high_density_horizontal else 1) + (0 if high_density_vertical else 2)
        header = GS + b"v0" + six.int2byte(density_byte) + self._int_low_high(im.width_bytes, 2) +\
            self._int_low_high(im.height, 2)
        return self._raw(header + im.to_raster_format())

    if impl == "graphics":
        # GS ( L raster format graphics
        img_header = self._int_low_high(im.width, 2) + self._int_low_high(im.height, 2)
        tone = b'0'
        colors = b'1'
        ym = six.int2byte(1 if high_density_vertical else 2)
        xm = six.int2byte(1 if high_density_horizontal else 2)
        header = tone + xm + ym + colors + img_header
        raster_data = im.to_raster_format()
        self._image_send_graphics_data(b'0', b'p', header + raster_data)
        self._image_send_graphics_data(b'0', b'2', b'')

    if impl == "bitImageColumn":
        # ESC *, column format bit image
        density_byte = (1 if high_density_horizontal else 0) + (32 if high_density_vertical else 0)
        header = ESC + b"*" + six.int2byte(density_byte) + self._int_low_high(im.width, 2)
        outp = [ESC + b"3" + six.int2byte(16)]  # Adjust line-feed size
        for blob in im.to_column_format(high_density_vertical):
            outp.append(header + blob + b"\n")
        outp.append(ESC + b"2")  # Reset line-feed size
        return self._raw(b''.join(outp))


# myUsb = Usb
# myUsb.__init__ = my_init
# myUsb.image = my_image
# myUsb._raw = my_raw


# p = Usb(0x04b8, 0x0202, 0)
# # # p.text("Hello World\n")
# res = p.image("/home/lisp3r/Downloads/trees-1614372523737-4703.jpg")
# print(res[1][:20].hex())

# dummy = Dummy()
# # dummy.text('JJJJ!!!')
# dummy.image("/home/lisp3r/Downloads/trees-1614372523737-4703.jpg")
# print(dummy.output[:20].hex())


from bluepy import btle


printer_mac_addp = 'B7:26:A2:0D:CA:66'


class NotifyHandler(btle.DefaultDelegate):
    def __init__(self, params=None):
        std.debug('Initialize notification handler')
        btle.DefaultDelegate.__init__(self)

    def handleNotification(self, cHandle, data):
        std.debug('Got ntification')
        print(cHandle)
        print(data)


# todo: singleton
class STD():
    def __str(self, msg, type):
        print('[{}] {}'.format(type, msg))

    def debug(self, msg):
        self.__str(msg, 'D')

    def info(self, msg):
        self.__str(msg, 'I')

    def warn(self, msg):
        self.__str(msg, 'W')

    def err(self, msg):
        self.__str(msg, 'E')


std = STD()


def get_all_services(printer):
    services = []
    _services = printer.getServices()
    for _s in _services:
        if s := printer.getServiceByUUID(s.uuid.getCommonName()):
            services.append(s)

    return services


def init_item(s):
    if not s.uuid.commonName:
        s.uuid.commonName = s.uuid.getCommonName()
    if hasattr(s, 'chars') and not s.chars:
        s.getCharacteristics()
        for ch in s.chars:
            init_item(ch)
    if hasattr(s, 'descs') and not s.descs:
        s.getDescriptors()
        for d in s.descs:
            init_item(d)


try:
    std.info('Trying to connected to {}...'.format(printer_mac_addp))
    printer = btle.Peripheral(deviceAddr=printer_mac_addp)
    std.info('Connected to {}'.format(printer_mac_addp))
except btle.BTLEDisconnectError as err:
    std.err(err)
    exit(1)

try:
    std.info('Searching for "ae30" service...')
    ae30_service = printer.getServiceByUUID('ae30')
except btle.BTLEEException:
    std.err('Can not find service with UUID ae30')
    std.warn('Services: {}'.format(str(get_all_services(printer))))
    exit(1)

init_item(ae30_service)

msg = 'Found service ae30 with characteristics:\n\n'
for ch in ae30_service.chars:
    msg += '    Characteristic 0x{} ({})\n'.format(ch.uuid.getCommonName().upper(), ch.propertiesToString())
    if ch.descs:
        msg += '        Characteristic Configuration:\n'
        msg += ''.join(['        UUID: {}, Handle: {}\n'.format(x.uuid, x.handle) for x in ch.descs])

std.info(msg)

printer.setDelegate(NotifyHandler)

ae02_char = [ch for ch in ae30_service.chars if ch.uuid.getCommonName() == 'ae02']
if ae02_char:
    ae02_char = ae02_char[0]
else:
    std.err('No characteristic with UUID "ae02"')

# notification_data = b"0100"


print(ae02_char.descs[0].__dict__)
# print(ae02_char.descs[0].write(notification_data))

# std.info('Turning on notifications from ae02 characteristic')

# ae02_char.write(notification_data)

# while True:
#     if printer.waitForNotifications(1.0):
#         continue

#     print ("Waiting...")
    # Perhaps do something else here

# Handle: 0x0009 (Unknown: Unknown: Client Characteristic Configuration)
#     [Service UUID: Unknown (0xae30)]
#     [Characteristic UUID: Unknown (0xae02)]
#     [UUID: Client Characteristic Configuration (0x2902)]
#     Characteristic Configuration Client: 0x0001, Notification
#         0000 0000 0000 00.. = Reseved: 0x0000
#         .... .... .... ..0. = Indication: False
#         .... .... .... ...1 = Notification: True

# Setup to turn notifications on, e.g.
#   svc = p.getServiceByUUID( service_uuid )
#   ch = svc.getCharacteristics( char_uuid )[0]
#   ch.write( setup_data )

std.info('Disonnected from {}'.format(printer_mac_addp))
printer.disconnect()

# std.info('Trying to read from aeo2')

# for ch in ae30.chars:
#     try:
#         if ch.supportsRead():
#             std.info('{} supports read. Trying...'.format(ch.uuid))
#             print(ch.read())
#     except btle.BTLEInternalError as err:
#         std.err(err)
